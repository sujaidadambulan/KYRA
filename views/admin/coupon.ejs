<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coupon Management</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            display: flex;
            background-color: #1a1d21;
            color: #fff;
        }

        .main-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            height: 100vh;
        }

        h1 {
            margin-bottom: 30px;
            font-size: 24px;
        }

        /* Coupon management specific styles */
        .action-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .action-button {
            background-color: #5865f2;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s;
            font-weight: 500;
        }

        .action-button:hover {
            background-color: #4752c4;
        }

        .search-box {
            display: flex;
            gap: 10px;
        }

        .search-input {
            background-color: #2c2f33;
            border: 1px solid #383b40;
            border-radius: 5px;
            padding: 10px 15px;
            color: #fff;
            width: 250px;
        }

        .search-button {
            background-color: #383b40;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            color: #fff;
            cursor: pointer;
        }

        .coupon-table-container {
            background-color: #2c2f33;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .coupon-table {
            width: 100%;
            border-collapse: collapse;
        }

        .coupon-table th,
        .coupon-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #383b40;
        }

        .coupon-table th {
            background-color: #383b40;
            color: #a8a8a8;
            font-weight: normal;
        }

        .status-active {
            background-color: rgba(46, 204, 113, 0.2);
            color: #2ecc71;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            display: inline-block;
        }

        .status-expired {
            background-color: rgba(231, 76, 60, 0.2);
            color: #e74c3c;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            display: inline-block;
        }

        .status-scheduled {
            background-color: rgba(52, 152, 219, 0.2);
            color: #3498db;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 14px;
            display: inline-block;
        }

        .action-icons {
            display: flex;
            gap: 15px;
        }

        .icon-button {
            background: none;
            border: none;
            cursor: pointer;
            color: #a8a8a8;
            font-size: 16px;
            transition: color 0.3s;
        }

        .icon-button.edit:hover {
            color: #3498db;
        }

        .icon-button.delete:hover {
            color: #e74c3c;
        }

        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal {
            background-color: #2c2f33;
            border-radius: 8px;
            padding: 25px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .modal-title {
            font-size: 20px;
        }

        .close-button {
            background: none;
            border: none;
            font-size: 22px;
            color: #a8a8a8;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: #a8a8a8;
        }

        .form-input {
            width: 100%;
            padding: 10px;
            background-color: #383b40;
            border: 1px solid #4f545c;
            border-radius: 5px;
            color: #fff;
        }

        .form-select {
            width: 100%;
            padding: 10px;
            background-color: #383b40;
            border: 1px solid #4f545c;
            border-radius: 5px;
            color: #fff;
        }

        .form-row {
            display: flex;
            gap: 15px;
        }

        .form-row .form-group {
            flex: 1;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 20px;
        }

        .cancel-button {
            background-color: #4f545c;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            color: #fff;
            cursor: pointer;
        }

        .save-button {
            background-color: #5865f2;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            color: #fff;
            cursor: pointer;
        }

        .pagination {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }

        .pagination-info {
            color: #a8a8a8;
        }

        .pagination-controls {
            display: flex;
            gap: 10px;
        }

        .pagination-button {
            background-color: #383b40;
            border: none;
            border-radius: 5px;
            padding: 8px 12px;
            color: #fff;
            cursor: pointer;
        }

        .pagination-button.active {
            background-color: #5865f2;
        }

        .pagination-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <%- include('../../views/partials/admin/header.ejs') %>
    <div class="main-content">
        <h1>Coupon Management</h1>
        
        <div class="action-bar">
            <button class="action-button" id="create-coupon-btn">Create New Coupon</button>
            <div class="search-box">
                <input type="text" class="search-input" id="searchInput" placeholder="Search coupons..." value="<%= search %>">
                <select class="search-input" id="categoryFilter">
                    <option value="">All Types</option>
                    <option value="percentage" <%= categoryFilter === 'percentage' ? 'selected' : '' %>>Percentage</option>
                    <option value="fixed" <%= categoryFilter === 'fixed' ? 'selected' : '' %>>Fixed</option>
                </select>
                <button class="search-button" id="searchBtn">Search</button>
            </div>
        </div>
        
        <div class="coupon-table-container">
            <table class="coupon-table">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Discount</th>
                        <th>Type</th>
                        <th>Min Purchase</th>
                        <th>Max Uses</th>
                        <th>Uses</th>
                        <th>Valid From</th>
                        <th>Valid To</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (coupons && coupons.length > 0) { %>
                        <% coupons.forEach(coupon => { %>
                            <tr data-coupon-id="<%= coupon._id %>">
                                <td><%= coupon.code %></td>
                                <td><%= coupon.discountType === 'percentage' ? coupon.discountValue + '%' : '₹' + coupon.discountValue.toFixed(2) %></td>
                                <td><%= coupon.discountType.charAt(0).toUpperCase() + coupon.discountType.slice(1) %></td>
                                <td>₹<%= coupon.minPurchase.toFixed(2) %></td>
                                <td><%= coupon.maxUses === 0 ? 'Unlimited' : coupon.maxUses %></td>
                                <td><%= coupon.uses %></td>
                                <td><%= new Date(coupon.validFrom).toLocaleDateString() %></td>
                                <td><%= new Date(coupon.validTo).toLocaleDateString() %></td>
                                <td>
                                    <span class="status-<%= coupon.status.toLowerCase() %>">
                                        <%= coupon.status %>
                                    </span>
                                </td>
                                <td>
                                    <div class="action-icons">
                                        <button class="icon-button edit" data-coupon-id="<%= coupon._id %>"><i class="fas fa-edit"></i></button>
                                        <button class="icon-button delete"><i class="fas fa-trash-alt"></i></button>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    <% } else { %>
                        <tr><td colspan="10">No coupons found</td></tr>
                    <% } %>
                </tbody>
            </table>
            
            <div class="pagination">
                <div class="pagination-info">
                    Showing <%= (currentPage - 1) * 5 + 1 %> to <%= Math.min(currentPage * 5, totalCoupons) %> of <%= totalCoupons %> entries
                </div>
                <div class="pagination-controls">
                    <button class="pagination-button" id="prevBtn" <%= currentPage === 1 ? 'disabled' : '' %>>Previous</button>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <button class="pagination-button <%= i === currentPage ? 'active' : '' %>" data-page="<%= i %>"><%= i %></button>
                    <% } %>
                    <button class="pagination-button" id="nextBtn" <%= currentPage === totalPages ? 'disabled' : '' %>>Next</button>
                </div>
            </div>
        </div>
        
        <!-- Create/Edit Coupon Modal -->
        <div class="modal-overlay" id="couponModal">
            <div class="modal">
                <div class="modal-header">
                    <h2 class="modal-title">Create New Coupon</h2>
                    <button class="close-button" id="closeModal">×</button>
                </div>
                <form id="couponForm" method="POST" action="/admin/coupon/create">
                    <input type="hidden" name="couponId" id="couponId">
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">Coupon Code</label>
                            <input type="text" class="form-input" name="code" placeholder="Enter coupon code" required>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Discount Type</label>
                                <select class="form-select" name="discountType">
                                    <option value="percentage">Percentage</option>
                                    <option value="fixed">Fixed Amount</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Discount Value</label>
                                <input type="number" class="form-input" name="discountValue" placeholder="Enter discount value" min="0" required>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Minimum Purchase</label>
                                <input type="number" class="form-input" name="minPurchase" placeholder="Enter minimum purchase amount" min="0">
                            </div>
                            <div class="form-group">
                                <label class="form-label">Maximum Uses</label>
                                <input type="number" class="form-input" name="maxUses" placeholder="Enter maximum uses (0 for unlimited)" min="0">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Valid From</label>
                                <input type="date" class="form-input" name="validFrom" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Valid To</label>
                                <input type="date" class="form-input" name="validTo" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Description (Optional)</label>
                            <textarea class="form-input" name="description" rows="3" placeholder="Enter coupon description"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="cancel-button" id="cancelModal">Cancel</button>
                        <button type="submit" class="save-button">Save Coupon</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const createCouponBtn = document.getElementById('create-coupon-btn');
            const couponModal = document.getElementById('couponModal');
            const closeModal = document.getElementById('closeModal');
            const cancelModal = document.getElementById('cancelModal');
            const couponForm = document.getElementById('couponForm');
            const deleteButtons = document.querySelectorAll('.delete');
            const editButtons = document.querySelectorAll('.edit');
            const searchBtn = document.getElementById('searchBtn');
            const searchInput = document.getElementById('searchInput');
            const categoryFilter = document.getElementById('categoryFilter');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const pageButtons = document.querySelectorAll('.pagination-button[data-page]');
            const modalTitle = document.querySelector('.modal-title');

            // Open modal for creating a new coupon
            createCouponBtn.addEventListener('click', () => {
                couponModal.style.display = 'flex';
                modalTitle.textContent = 'Create New Coupon';
                couponForm.reset();
                couponForm.action = '/admin/coupon/create';
                document.getElementById('couponId').value = '';
            });

            // Close modal
            closeModal.addEventListener('click', () => {
                couponModal.style.display = 'none';
            });

            cancelModal.addEventListener('click', () => {
                couponModal.style.display = 'none';
            });

            // Handle edit button clicks
            editButtons.forEach(button => {
                button.addEventListener('click', async () => {
                    const couponId = button.dataset.couponId;
                    try {
                        const response = await fetch(`/admin/coupon/${couponId}`);
                        const coupon = await response.json();

                        if (coupon.success) {
                            modalTitle.textContent = 'Edit Coupon';
                            couponModal.style.display = 'flex';
                            couponForm.action = '/admin/coupon/update';

                            // Populate form with coupon data
                            document.getElementById('couponId').value = coupon.data._id;
                            couponForm.querySelector('[name="code"]').value = coupon.data.code;
                            couponForm.querySelector('[name="discountType"]').value = coupon.data.discountType;
                            couponForm.querySelector('[name="discountValue"]').value = coupon.data.discountValue;
                            couponForm.querySelector('[name="minPurchase"]').value = coupon.data.minPurchase;
                            couponForm.querySelector('[name="maxUses"]').value = coupon.data.maxUses;
                            couponForm.querySelector('[name="validFrom"]').value = new Date(coupon.data.validFrom).toISOString().split('T')[0];
                            couponForm.querySelector('[name="validTo"]').value = new Date(coupon.data.validTo).toISOString().split('T')[0];
                            couponForm.querySelector('[name="description"]').value = coupon.data.description || '';
                        } else {
                            Swal.fire('Error', 'Failed to load coupon data', 'error');
                        }
                    } catch (error) {
                        console.error('Error fetching coupon:', error);
                        Swal.fire('Error', 'Error fetching coupon data', 'error');
                    }
                });
            });

            // Form submission for create/update
            couponForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(couponForm);
                const couponId = document.getElementById('couponId').value;
                const endpoint = couponId ? '/admin/coupon/update' : '/admin/coupon/create';

                try {
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        body: JSON.stringify(Object.fromEntries(formData)),
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Success', data.message, 'success').then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire('Error', data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error submitting form:', error);
                    Swal.fire('Error', 'An error occurred while saving the coupon', 'error');
                }
            });

            // Delete logic
            deleteButtons.forEach(button => {
                button.addEventListener('click', async () => {
                    const couponId = button.closest('tr').dataset.couponId;
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: 'Do you want to delete this coupon?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonText: 'Yes, delete it!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/admin/coupon/delete/${couponId}`, {
                                method: 'DELETE'
                            });
                            const data = await response.json();

                            if (data.success) {
                                Swal.fire('Deleted!', data.message, 'success').then(() => {
                                    window.location.reload();
                                });
                            } else {
                                Swal.fire('Error', data.message, 'error');
                            }
                        } catch (error) {
                            console.error('Error deleting coupon:', error);
                            Swal.fire('Error', 'An error occurred while deleting the coupon', 'error');
                        }
                    }
                });
            });

            // Search and pagination logic
            function updateURL() {
                const search = searchInput.value;
                const category = categoryFilter.value;
                const page = new URLSearchParams(window.location.search).get('page') || 1;
                window.location.href = `/admin/coupon?page=${page}&search=${encodeURIComponent(search)}&category=${encodeURIComponent(category)}`;
            }

            searchBtn.addEventListener('click', updateURL);
            searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') updateURL();
            });
            categoryFilter.addEventListener('change', updateURL);

            prevBtn.addEventListener('click', () => {
                if (parseInt('<%= currentPage %>') > 1) {
                    window.location.href = `/admin/coupon?page=${parseInt('<%= currentPage %>') - 1}&search=${encodeURIComponent('<%= search %>')}&category=${encodeURIComponent('<%= categoryFilter %>')}`;
                }
            });

            nextBtn.addEventListener('click', () => {
                if (parseInt('<%= currentPage %>') < parseInt('<%= totalPages %>')) {
                    window.location.href = `/admin/coupon?page=${parseInt('<%= currentPage %>') + 1}&search=${encodeURIComponent('<%= search %>')}&category=${encodeURIComponent('<%= categoryFilter %>')}`;
                }
            });

            pageButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const page = button.dataset.page;
                    window.location.href = `/admin/coupon?page=${page}&search=${encodeURIComponent('<%= search %>')}&category=${encodeURIComponent('<%= categoryFilter %>')}`;
                });
            });
        });
    </script>
</body>
</html>